package org.praxisplatform.uischema.util;

import org.springdoc.core.models.GroupedOpenApi;

import java.util.Collections;
import java.util.List;

/**
 * <h2>üéØ Resolvedor Inteligente de Grupos OpenAPI com Algoritmo "Best Match"</h2>
 * 
 * <h3>üéØ Problema Resolvido</h3>
 * <p>Antes desta implementa√ß√£o, a resolu√ß√£o de grupos retornava o primeiro match encontrado,
 * frequentemente resultando em "default" ou "application" em vez do grupo espec√≠fico correto.
 * O algoritmo "best match" prioriza padr√µes mais espec√≠ficos (mais longos).</p>
 * 
 * <h3>üß† Algoritmo "Best Match"</h3>
 * <p>Em vez de retornar o primeiro padr√£o que faz match, este resolvedor:</p>
 * <ol>
 *   <li><strong>Avalia todos os padr√µes:</strong> N√£o para no primeiro match</li>
 *   <li><strong>Normaliza padr√µes:</strong> Remove wildcards (/** e /*) para compara√ß√£o</li>
 *   <li><strong>Prioriza especificidade:</strong> Padr√µes mais longos t√™m prioridade</li>
 *   <li><strong>Retorna melhor match:</strong> Grupo com padr√£o mais espec√≠fico</li>
 * </ol>
 * 
 * <h3>üìä Exemplo de Funcionamento</h3>
 * <pre>
 * Path de entrada: "/api/human-resources/eventos-folha/all"
 * 
 * Grupos registrados:
 * - Group: "application", Pattern: "/**"           ‚Üí Normalizado: ""            (length: 0)
 * - Group: "api-hr-eventos", Pattern: "/api/human-resources/eventos-folha/**" 
 *                                                  ‚Üí Normalizado: "/api/human-resources/eventos-folha" (length: 35)
 * 
 * Resultado: "api-hr-eventos" (melhor match com maior especificidade)
 * </pre>
 * 
 * <h3>‚ö° Performance</h3>
 * <ul>
 *   <li><strong>O(n*m):</strong> n grupos √ó m padr√µes por grupo</li>
 *   <li><strong>T√≠pico:</strong> 5-10 grupos com 1-2 padr√µes cada = ~10-20 opera√ß√µes</li>
 *   <li><strong>Cache upstream:</strong> ApiDocsController cacheia resultados</li>
 * </ul>
 * 
 * <h3>üîó Integra√ß√£o</h3>
 * <p>Usado automaticamente pelo ApiDocsController para resolver grupos baseados
 * no path da requisi√ß√£o, eliminando necessidade de par√¢metro 'document' manual.</p>
 * 
 * @see org.praxisplatform.uischema.controller.docs.ApiDocsController#resolveGroupFromPath(String)
 * @see org.praxisplatform.uischema.configuration.DynamicSwaggerConfig
 */
public class OpenApiGroupResolver {

    private final List<GroupedOpenApi> groupedOpenApis;

    public OpenApiGroupResolver(List<GroupedOpenApi> groupedOpenApis) {
        this.groupedOpenApis = groupedOpenApis == null ? Collections.emptyList() : groupedOpenApis;
    }

    /**
     * <h3>üéØ M√©todo Principal - Algoritmo "Best Match"</h3>
     * <p>Este √© o cora√ß√£o da resolu√ß√£o inteligente de grupos. Implementa o algoritmo
     * "best match" que prioriza padr√µes mais espec√≠ficos sobre gen√©ricos.</p>
     * 
     * <h4>üîÑ Fluxo do Algoritmo:</h4>
     * <ol>
     *   <li><strong>Itera√ß√£o:</strong> Percorre todos os GroupedOpenApi registrados</li>
     *   <li><strong>Extra√ß√£o:</strong> Obt√©m pathsToMatch de cada grupo</li>
     *   <li><strong>Normaliza√ß√£o:</strong> Remove wildcards (/** e /*) dos padr√µes</li>
     *   <li><strong>Matching:</strong> Verifica se requestPath.startsWith(normalizedPattern)</li>
     *   <li><strong>Compara√ß√£o:</strong> Prioriza padr√µes com maior length (mais espec√≠ficos)</li>
     *   <li><strong>Resultado:</strong> Retorna grupo com padr√£o mais espec√≠fico ou null</li>
     * </ol>
     * 
     * <h4>üèÜ Vantagem do "Best Match":</h4>
     * <p>Resolve o problema cl√°ssico onde padr√µes gen√©ricos como "/**" sempre faziam match primeiro,
     * mascarando padr√µes espec√≠ficos como "/api/human-resources/eventos-folha/**".</p>
     * 
     * <h4>üìä Cen√°rio T√≠pico:</h4>
     * <pre>
     * requestPath: "/api/human-resources/eventos-folha/all"
     * 
     * Padr√µes dispon√≠veis:
     * 1. "/**"                                    ‚Üí normalized: ""                          (length: 0)
     * 2. "/api/human-resources/**"                ‚Üí normalized: "/api/human-resources"     (length: 21) 
     * 3. "/api/human-resources/eventos-folha/**" ‚Üí normalized: "/api/human-resources/eventos-folha" (length: 35)
     * 
     * Todos fazem match, mas o padr√£o 3 tem maior especificidade ‚Üí grupo correspondente retornado
     * </pre>
     *
     * @param requestPath path da requisi√ß√£o HTTP (ex: "/api/human-resources/eventos-folha/all")
     * @return nome do grupo com melhor match ou {@code null} se nenhum padr√£o fizer match
     */
    public String resolveGroup(String requestPath) {
        if (requestPath == null) {
            return null;
        }
        
        String bestMatch = null;
        int bestMatchLength = 0;
        
        // üîç PASSO 1: Iterar todos os grupos registrados dinamicamente
        for (GroupedOpenApi groupedOpenApi : groupedOpenApis) {
            List<String> patterns = groupedOpenApi.getPathsToMatch();
            if (patterns == null) {
                continue;
            }
            
            // üéØ PASSO 2: Avaliar cada padr√£o do grupo atual
            for (String pattern : patterns) {
                String normalized = normalize(pattern);
                
                // ‚úÖ PASSO 3: Verificar se o path faz match com o padr√£o
                if (requestPath.startsWith(normalized)) {
                    // üèÜ PASSO 4: Priorizar matches mais espec√≠ficos (padr√µes mais longos)
                    if (normalized.length() > bestMatchLength) {
                        bestMatch = groupedOpenApi.getGroup();
                        bestMatchLength = normalized.length();
                    }
                }
            }
        }
        
        return bestMatch;
    }

    /**
     * <h3>üßπ Normaliza√ß√£o de Padr√µes</h3>
     * <p>Remove wildcards dos padr√µes de path para permitir compara√ß√£o precisa de especificidade.</p>
     * 
     * <h4>üîÑ Transforma√ß√µes:</h4>
     * <ul>
     *   <li><strong>"/**"</strong> ‚Üí <strong>""</strong> (padr√£o mais gen√©rico)</li>
     *   <li><strong>"/*"</strong> ‚Üí <strong>""</strong> (padr√£o gen√©rico)</li>
     *   <li><strong>"/api/human-resources/**"</strong> ‚Üí <strong>"/api/human-resources"</strong></li>
     *   <li><strong>"/api/human-resources/eventos-folha/**"</strong> ‚Üí <strong>"/api/human-resources/eventos-folha"</strong></li>
     * </ul>
     * 
     * <h4>üéØ Import√¢ncia:</h4>
     * <p>A normaliza√ß√£o permite comparar a especificidade real dos padr√µes baseada no
     * comprimento do path efetivo, n√£o nos wildcards. Isso √© crucial para o algoritmo
     * "best match" funcionar corretamente.</p>
     * 
     * @param pattern padr√£o original com wildcards (ex: "/api/human-resources/**")
     * @return padr√£o normalizado sem wildcards (ex: "/api/human-resources")
     */
    private String normalize(String pattern) {
        if (pattern == null) {
            return "";
        }
        
        // üéØ Remove wildcard de m√∫ltiplos n√≠veis: "/**"
        if (pattern.endsWith("/**")) {
            return pattern.substring(0, pattern.length() - 3);
        }
        
        // üéØ Remove wildcard de n√≠vel √∫nico: "/*"  
        if (pattern.endsWith("/*")) {
            return pattern.substring(0, pattern.length() - 2);
        }
        
        // üìã Retorna padr√£o inalterado se n√£o tiver wildcards
        return pattern;
    }
}
