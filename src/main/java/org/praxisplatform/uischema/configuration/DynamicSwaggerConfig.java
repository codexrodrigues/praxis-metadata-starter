package org.praxisplatform.uischema.configuration;

import org.praxisplatform.uischema.annotation.ApiGroup;
import org.praxisplatform.uischema.annotation.ApiResource;
import org.praxisplatform.uischema.controller.base.AbstractCrudController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * <h1>üéØ Configura√ß√£o Din√¢mica de Grupos OpenAPI com Estrat√©gia Dupla</h1>
 * 
 * <p>Cria automaticamente grupos OpenAPI otimizados para performance usando uma estrat√©gia dupla:
 * <strong>Grupos Individuais Ultra-Espec√≠ficos</strong> para CRUDs + <strong>Grupos Agregados por Contexto</strong> via @ApiGroup.</p>
 * 
 * <h2>üéØ Problema Resolvido</h2>
 * <p>Antes desta implementa√ß√£o, era necess√°rio registrar grupos OpenAPI manualmente e especificar par√¢metros 
 * 'document' no ApiDocsController. Esta classe resolve automaticamente ambos os problemas com performance otimizada.</p>
 *
 * <h2>üöÄ Estrat√©gia Dupla de Grupos</h2>
 * 
 * <h3>üìä 1. Grupos Individuais Ultra-Espec√≠ficos</h3>
 * <ul>
 *   <li><strong>Escopo:</strong> Apenas controllers que estendem {@code AbstractCrudController}</li>
 *   <li><strong>Performance:</strong> ~3-5KB por documento (ultra-r√°pido)</li>
 *   <li><strong>Uso:</strong> Consultas espec√≠ficas como {@code /schemas/filtered?path=/api/human-resources/eventos-folha/all}</li>
 * </ul>
 * 
 * <h3>üè∑Ô∏è 2. Grupos Agregados por Contexto</h3>
 * <ul>
 *   <li><strong>Escopo:</strong> QUALQUER controller com anota√ß√£o {@code @ApiGroup}</li>
 *   <li><strong>Performance:</strong> ~50-100KB por documento (ainda otimizado)</li>
 *   <li><strong>Uso:</strong> Visualiza√ß√£o de contextos completos no Swagger UI</li>
 * </ul>
 *
 * <h2>üîÑ Fluxo de Funcionamento</h2>
 * <ol>
 *   <li><strong>Startup da Aplica√ß√£o:</strong> @PostConstruct √© executado automaticamente</li>
 *   <li><strong>Escaneamento Dual:</strong> 
 *       <ul>
 *         <li>1¬™ passada: Identifica {@code AbstractCrudController} para grupos individuais</li>
 *         <li>2¬™ passada: Identifica QUALQUER controller com {@code @ApiGroup} para grupos agregados</li>
 *       </ul>
 *   </li>
 *   <li><strong>Extra√ß√£o de Paths:</strong> Usa {@code AnnotationUtils} para detectar @ApiResource/@RequestMapping</li>
 *   <li><strong>Registro Inteligente:</strong> Evita duplica√ß√£o de beans e otimiza padr√µes agregados</li>
 * </ol>
 *
 * <h2>üìã Exemplos de Uso</h2>
 * <pre>{@code
 * // ‚úÖ CRUD Controller - Cria grupo individual + participa do agregado
 * @ApiResource("/api/human-resources/funcionarios")
 * @ApiGroup("human-resources") 
 * public class FuncionarioController extends AbstractCrudController<...> {
 *     // Grupo individual: "api-human-resources-funcionarios" (ultra-espec√≠fico)
 *     // Grupo agregado: "recursos-humanos" (contexto completo)
 * }
 * 
 * // ‚úÖ Bulk Controller - Apenas participa do grupo agregado
 * @ApiResource("/api/human-resources/funcionarios")
 * @ApiGroup("human-resources-bulk")
 * public class FuncionarioBulkController extends AbstractBulkController<...> {
 *     // Grupo agregado: "recursos-humanos-bulk" (contexto bulk)
 * }
 * 
 * // ‚úÖ Qualquer Controller - Participa apenas do grupo agregado
 * @RestController
 * @RequestMapping("/api/custom/reports")
 * @ApiGroup("relatorios")
 * public class CustomReportController {
 *     // Grupo agregado: "relatorios" (contexto customizado)
 * }
 * }</pre>
 *
 * <h2>üìä Resultado T√≠pico</h2>
 * <p>Para uma aplica√ß√£o com 8 controllers CRUD e 8 controllers Bulk:</p>
 * <pre>
 * üìã Grupos Individuais (8):
 * ‚îú‚îÄ‚îÄ api-human-resources-funcionarios     (3KB - ultra-r√°pido)
 * ‚îú‚îÄ‚îÄ api-human-resources-cargos          (3KB - ultra-r√°pido) 
 * ‚îú‚îÄ‚îÄ api-human-resources-departamentos   (3KB - ultra-r√°pido)
 * ‚îî‚îÄ‚îÄ ... (5 mais)
 * 
 * üè∑Ô∏è Grupos Agregados (2):
 * ‚îú‚îÄ‚îÄ recursos-humanos        (50KB - 8 controllers CRUD)
 * ‚îî‚îÄ‚îÄ recursos-humanos-bulk   (30KB - 8 controllers Bulk)
 * 
 * üìà Total: 10 grupos vs documento completo (500KB+)
 * </pre>
 *
 * <h2>üöÄ Benef√≠cios</h2>
 * <ul>
 *   <li><strong>Performance Extrema:</strong> Grupos individuais ~99% menores que documento completo</li>
 *   <li><strong>Flexibilidade Total:</strong> Qualquer controller pode participar de contextos via @ApiGroup</li>
 *   <li><strong>Sem√¢ntica Clara:</strong> Grupos individuais para CRUDs, agregados para contextos</li>
 *   <li><strong>Zero Configura√ß√£o:</strong> Detec√ß√£o autom√°tica de anota√ß√µes @ApiResource/@RequestMapping</li>
 *   <li><strong>Integra√ß√£o Perfeita:</strong> ApiDocsController resolve grupos automaticamente</li>
 * </ul>
 *
 * <h2>‚öôÔ∏è Configura√ß√£o Necess√°ria</h2>
 * <p>Esta classe deve estar inclu√≠da no @ComponentScan da PraxisMetadataAutoConfiguration:</p>
 * <pre>{@code
 * @ComponentScan(basePackages = {"org.praxisplatform.uischema.configuration"})
 * }</pre>
 *
 * @see org.praxisplatform.uischema.annotation.ApiGroup
 * @see org.praxisplatform.uischema.annotation.ApiResource
 * @see org.praxisplatform.uischema.controller.docs.ApiDocsController
 * @see org.praxisplatform.uischema.util.OpenApiGroupResolver
 */
@Configuration
public class DynamicSwaggerConfig {

    private static final Logger logger = LoggerFactory.getLogger(DynamicSwaggerConfig.class);

    @Autowired
    private ApplicationContext applicationContext;

    @Autowired
    private ConfigurableListableBeanFactory beanFactory;

    // Injeta o bean espec√≠fico para evitar ambiguidade
    @Autowired
    @Qualifier("requestMappingHandlerMapping")
    private RequestMappingHandlerMapping handlerMapping;

    /**
     * Configura√ß√£o para validar se controllers que estendem AbstractCrudController usam @ApiResource.
     * 
     * <h4>üìã Valores poss√≠veis:</h4>
     * <ul>
     *   <li><strong>WARN (padr√£o):</strong> Apenas emite warnings no log</li>
     *   <li><strong>FAIL:</strong> Falha o startup da aplica√ß√£o</li>
     *   <li><strong>IGNORE:</strong> Desabilita a valida√ß√£o completamente</li>
     * </ul>
     * 
     * <h4>‚öôÔ∏è Configura√ß√£o:</h4>
     * <pre>
     * # application.properties
     * praxis.openapi.validation.api-resource-required=WARN
     * </pre>
     */
    @Value("${praxis.openapi.validation.api-resource-required:WARN}")
    private String apiResourceValidationMode;

    /**
     * <h3>üéØ M√©todo Principal - Cria√ß√£o Din√¢mica com Estrat√©gia Dupla</h3>
     * <p>Este m√©todo √© executado automaticamente durante o startup da aplica√ß√£o (@PostConstruct)
     * e implementa a estrat√©gia dupla de cria√ß√£o de grupos:</p>
     * 
     * <h4>üìä 1¬™ Passada - Grupos Individuais Ultra-Espec√≠ficos:</h4>
     * <ul>
     *   <li>Escaneia apenas controllers que estendem {@code AbstractCrudController}</li>
     *   <li>Cria grupos individuais baseados no path completo (ex: "api-human-resources-funcionarios")</li>
     *   <li>Performance ultra-otimizada: ~3-5KB por documento</li>
     * </ul>
     * 
     * <h4>üè∑Ô∏è 2¬™ Passada - Grupos Agregados por Contexto:</h4>
     * <ul>
     *   <li>Escaneia TODOS os controllers em busca de anota√ß√£o {@code @ApiGroup}</li>
     *   <li>Agrupa controllers por contexto de neg√≥cio (ex: "recursos-humanos", "recursos-humanos-bulk")</li>
     *   <li>Calcula padr√µes agregados inteligentes que englobam m√∫ltiplos paths</li>
     * </ul>
     * 
     * <h4>üìä Exemplo de Sa√≠da no Log:</h4>
     * <pre>
     * Total de handlers encontrados: 247
     * Controllers qualificados para grupos individuais (AbstractCrudController): 8
     * Grupo individual 'api-human-resources-funcionarios' registrado para FuncionarioController
     * Grupo individual 'api-human-resources-cargos' registrado para CargoController
     * ... (6 mais grupos individuais)
     * 
     * Grupo agregado 'recursos-humanos' registrado com 8 controller(s) (pattern: /api/human-resources)
     * Grupo agregado 'recursos-humanos-bulk' registrado com 8 controller(s) (pattern: /api/human-resources)
     * 
     * Total: 10 grupos (8 individuais + 2 agregados)
     * </pre>
     * 
     * <h4>üöÄ Performance Resultante:</h4>
     * <ul>
     *   <li><strong>Consultas espec√≠ficas:</strong> 3-5KB (grupos individuais)</li>
     *   <li><strong>Contextos de neg√≥cio:</strong> 50-100KB (grupos agregados)</li>
     *   <li><strong>Vs documento completo:</strong> 500KB+ (90-99% de economia)</li>
     * </ul>
     */
    @PostConstruct
    public void createDynamicGroups() {
        logger.info("Iniciando escaneamento din√¢mico de grupos para controllers que estendem AbstractCrudController...");

        // üìã PASSO 1: Obter todos os handler methods registrados no Spring MVC
        Map<RequestMappingInfo, HandlerMethod> handlerMethods = handlerMapping.getHandlerMethods();
        Set<Class<?>> qualifyingControllers = new HashSet<>();

        // üóÇÔ∏è PASSO 2: Mapas para organizar grupos e paths
        Map<Class<?>, String> controllerGroups = new HashMap<>();
        Map<Class<?>, String> controllerPaths = new HashMap<>();

        int totalHandlers = handlerMethods.size();
        logger.info("Total de handlers encontrados: {}", totalHandlers);

        // üîç PASSO 3A: Escanear controllers AbstractCrudController para grupos individuais
        Map<String, Set<String>> aggregatedGroupToPaths = new HashMap<>();
        Set<String> registeredGroupNames = new HashSet<>();
        
        for (Map.Entry<RequestMappingInfo, HandlerMethod> entry : handlerMethods.entrySet()) {
            HandlerMethod handlerMethod = entry.getValue();
            Class<?> controllerClass = handlerMethod.getBeanType();

            // ‚úÖ GRUPOS INDIVIDUAIS: Apenas controllers que estendem AbstractCrudController
            if (AbstractCrudController.class.isAssignableFrom(controllerClass)) {
                qualifyingControllers.add(controllerClass);

                logger.debug("üîç DEBUG: Analisando controller CRUD: {}", controllerClass.getSimpleName());
                
                String basePath = extractControllerBasePath(controllerClass);
                
                if (basePath != null && !basePath.isEmpty() && !"/".equals(basePath)) {
                    // üéØ Criar grupo individual ultra-espec√≠fico
                    String individualGroupName = basePath.replaceAll("^/|/$", "").replace("/", "-");
                    if (!registeredGroupNames.contains(individualGroupName)) {
                        registerGroupBeanWithCustomName(basePath, individualGroupName);
                        registeredGroupNames.add(individualGroupName);
                        logger.info("Grupo individual '{}' registrado para {} (path: {})",
                            individualGroupName, controllerClass.getSimpleName(), basePath);
                    }
                } else {
                    logger.warn("BasePath inv√°lido ou vazio para controller CRUD: {} (basePath='{}')",
                        controllerClass.getSimpleName(), basePath);
                }
            }
        }

        logger.info("Controllers qualificados para grupos individuais (AbstractCrudController): {}", qualifyingControllers.size());

        // üîç PASSO 3B: Escanear TODOS os controllers para grupos agregados via @ApiGroup
        for (Map.Entry<RequestMappingInfo, HandlerMethod> entry : handlerMethods.entrySet()) {
            HandlerMethod handlerMethod = entry.getValue();
            Class<?> controllerClass = handlerMethod.getBeanType();
            
            // üè∑Ô∏è GRUPOS AGREGADOS: Qualquer controller com @ApiGroup
            ApiGroup apiGroup = AnnotationUtils.findAnnotation(controllerClass, ApiGroup.class);
            if (apiGroup != null) {
                logger.debug("üîç DEBUG: Controller com @ApiGroup encontrado: {} ‚Üí '{}'", 
                    controllerClass.getSimpleName(), apiGroup.value());
                
                String basePath = extractControllerBasePath(controllerClass);
                
                if (basePath != null && !basePath.isEmpty() && !"/".equals(basePath)) {
                    String customGroupName = apiGroup.value();
                    aggregatedGroupToPaths.computeIfAbsent(customGroupName, k -> new HashSet<>()).add(basePath);
                } else {
                    logger.warn("Controller {} tem @ApiGroup mas basePath inv√°lido: '{}'",
                        controllerClass.getSimpleName(), basePath);
                }
            }
        }
        
        // üéØ PASSO 4: Registrar grupos agregados (@ApiGroup)
        for (Map.Entry<String, Set<String>> entry : aggregatedGroupToPaths.entrySet()) {
            String customGroupName = entry.getKey();
            Set<String> paths = entry.getValue();
            
            if (!registeredGroupNames.contains(customGroupName)) {
                // Criar padr√£o agregado que inclui todos os paths do grupo
                String aggregatedPattern = determineAggregatedPattern(paths);
                registerGroupBeanWithCustomName(aggregatedPattern, customGroupName);
                registeredGroupNames.add(customGroupName);
                
                logger.info("Grupo agregado '{}' registrado com {} controller(s) (pattern: {}, paths: {})",
                    customGroupName, paths.size(), aggregatedPattern, paths);
            }
        }

        // üö® Aviso caso nenhum controller qualificado seja encontrado
        if (qualifyingControllers.isEmpty()) {
            logger.warn("Nenhum controller qualificado encontrado. Verifique se os controllers estendem AbstractCrudController e t√™m @RequestMapping.");
        }
    }

    /**
     * <h3>‚úÖ Valida√ß√£o de Conformidade com @ApiResource</h3>
     * <p>Executa ap√≥s o startup completo da aplica√ß√£o para validar se todos os controllers 
     * que estendem AbstractCrudController est√£o usando @ApiResource conforme esperado.</p>
     * 
     * <h4>üéØ Objetivo:</h4>
     * <p>Garantir que developers sigam o padr√£o arquitetural correto, evitando inconsist√™ncias
     * e problemas de manuten√ß√£o futuros. For√ßa migra√ß√£o para @ApiResource para aproveitar
     * os benef√≠cios da resolu√ß√£o autom√°tica de grupos OpenAPI.</p>
     * 
     * <h4>üìã Comportamentos:</h4>
     * <ul>
     *   <li><strong>WARN:</strong> Emite warnings informativos no log (padr√£o)</li>
     *   <li><strong>FAIL:</strong> Interrompe o startup com exce√ß√£o</li>
     *   <li><strong>IGNORE:</strong> Pula a valida√ß√£o completamente</li>
     * </ul>
     * 
     * <h4>‚ö†Ô∏è Sem Exce√ß√µes:</h4>
     * <p>Todos os controllers que estendem AbstractCrudController devem migrar para @ApiResource.
     * N√£o h√° anota√ß√£o de exce√ß√£o ou contorno - a valida√ß√£o √© direta e obrigat√≥ria.</p>
     */
    @EventListener(ApplicationReadyEvent.class)
    public void validateApiResourceUsage() {
        if ("IGNORE".equalsIgnoreCase(apiResourceValidationMode)) {
            logger.debug("Valida√ß√£o de @ApiResource desabilitada via configura√ß√£o");
            return;
        }

        logger.info("üîç Iniciando valida√ß√£o de uso de @ApiResource em controllers AbstractCrud...");
        
        Map<RequestMappingInfo, HandlerMethod> handlerMethods = handlerMapping.getHandlerMethods();
        Set<Class<?>> violatingControllers = new HashSet<>();
        Set<Class<?>> compliantControllers = new HashSet<>();
        
        // üìã PASSO 1: Identificar controllers que estendem AbstractCrudController
        for (Map.Entry<RequestMappingInfo, HandlerMethod> entry : handlerMethods.entrySet()) {
            HandlerMethod handlerMethod = entry.getValue();
            Class<?> controllerClass = handlerMethod.getBeanType();

            // ‚úÖ Filtra apenas controllers que estendem AbstractCrudController
            if (AbstractCrudController.class.isAssignableFrom(controllerClass)) {
                
                // üîç Verifica se usa @ApiResource ou pelo menos @RequestMapping + @RestController
                boolean hasApiResource = AnnotationUtils.findAnnotation(controllerClass, ApiResource.class) != null;
                boolean hasRequestMapping = AnnotationUtils.findAnnotation(controllerClass, RequestMapping.class) != null;
                
                if (hasApiResource) {
                    compliantControllers.add(controllerClass);
                    logger.debug("‚úÖ {} usa @ApiResource corretamente", controllerClass.getSimpleName());
                } else if (hasRequestMapping) {
                    violatingControllers.add(controllerClass);
                    logger.debug("‚ö†Ô∏è {} usa @RequestMapping em vez de @ApiResource", controllerClass.getSimpleName());
                } else {
                    violatingControllers.add(controllerClass);
                    logger.debug("‚ùå {} n√£o tem anota√ß√£o de mapeamento detect√°vel", controllerClass.getSimpleName());
                }
            }
        }
        
        // üìä PASSO 2: Reportar resultados
        int totalControllers = compliantControllers.size() + violatingControllers.size();
        int compliantCount = compliantControllers.size();
        int violatingCount = violatingControllers.size();
        
        logger.info("üìä Relat√≥rio de Conformidade @ApiResource:");
        logger.info("   ‚úÖ Conformes: {}/{} controllers", compliantCount, totalControllers);
        logger.info("   ‚ö†Ô∏è Precisam migra√ß√£o: {}/{} controllers", violatingCount, totalControllers);
        
        if (!violatingControllers.isEmpty()) {
            String violatingNames = violatingControllers.stream()
                .map(Class::getSimpleName)
                .reduce((a, b) -> a + ", " + b)
                .orElse("nenhum");
                
            String message = String.format(
                "üö® Controllers que precisam migrar para @ApiResource: %s. " +
                "Recomenda-se substituir @RestController + @RequestMapping por @ApiResource(ApiPaths.CONSTANT) " +
                "para aproveitar os benef√≠cios da resolu√ß√£o autom√°tica de grupos OpenAPI.",
                violatingNames
            );
            
            // üéØ PASSO 3: A√ß√£o baseada na configura√ß√£o
            if ("FAIL".equalsIgnoreCase(apiResourceValidationMode)) {
                throw new IllegalStateException(message + " Configurado para falhar no startup (praxis.openapi.validation.api-resource-required=FAIL)");
            } else {
                logger.warn(message);
                logger.info("üí° Para desabilitar esta valida√ß√£o: praxis.openapi.validation.api-resource-required=IGNORE");
                logger.info("üí° Para falhar o startup: praxis.openapi.validation.api-resource-required=FAIL");
            }
        } else {
            logger.info("üéâ Todos os controllers AbstractCrud est√£o usando @ApiResource corretamente!");
        }
    }

    /**
     * <h3>üîç Extrai Base Path de um Controller</h3>
     * <p>M√©todo utilit√°rio que extrai o path base de qualquer controller, 
     * tentando primeiro @ApiResource e depois @RequestMapping.</p>
     * 
     * <h4>üéØ Estrat√©gias de Extra√ß√£o:</h4>
     * <ol>
     *   <li><strong>@ApiResource:</strong> Detecta meta-anota√ß√£o primeiro</li>
     *   <li><strong>@RequestMapping:</strong> Fallback para anota√ß√£o direta</li>
     * </ol>
     * 
     * @param controllerClass a classe do controller a ser analisada
     * @return o basePath extra√≠do ou null se n√£o encontrado
     */
    private String extractControllerBasePath(Class<?> controllerClass) {
        // üéØ ESTRAT√âGIA 1: Detectar @ApiResource diretamente
        ApiResource apiResource = AnnotationUtils.findAnnotation(controllerClass, ApiResource.class);
        
        if (apiResource != null) {
            String basePath = extractBasePath(apiResource);
            logger.debug("üîç DEBUG: Controller {}: @ApiResource={}, basePath extra√≠do={}", 
                controllerClass.getSimpleName(), 
                java.util.Arrays.toString(apiResource.value()),
                basePath);
            return basePath;
        }
        
        // üîÑ ESTRAT√âGIA 2: Fallback para @RequestMapping
        RequestMapping requestMapping = AnnotationUtils.findAnnotation(controllerClass, RequestMapping.class);
        if (requestMapping != null) {
            String basePath = extractBasePath(requestMapping);
            logger.debug("üîç DEBUG: Controller {}: @RequestMapping={}, basePath extra√≠do={}", 
                controllerClass.getSimpleName(), 
                java.util.Arrays.toString(requestMapping.value()),
                basePath);
            return basePath;
        }
        
        logger.debug("üîç DEBUG: Controller {}: Nenhuma anota√ß√£o @ApiResource ou @RequestMapping encontrada", 
            controllerClass.getSimpleName());
        return null;
    }

    /**
     * <h3>üéØ Determina Padr√£o Agregado para Grupos @ApiGroup</h3>
     * <p>Calcula o padr√£o comum mais espec√≠fico que engloba todos os paths de um grupo @ApiGroup.</p>
     * 
     * <h4>üìä Exemplos de Funcionamento:</h4>
     * <pre>
     * Input:  ["/api/human-resources/funcionarios", "/api/human-resources/departamentos"]
     * Output: "/api/human-resources"
     * 
     * Input:  ["/api/human-resources/funcionarios"]  
     * Output: "/api/human-resources/funcionarios"
     * 
     * Input:  ["/api/financeiro/contas", "/api/financeiro/extratos"]
     * Output: "/api/financeiro"
     * </pre>
     * 
     * <h4>üéØ Estrat√©gia:</h4>
     * <p>Encontra o prefixo comum mais longo entre todos os paths, garantindo que o
     * padr√£o agregado capture todos os endpoints do grupo sem ser excessivamente gen√©rico.</p>
     * 
     * @param paths conjunto de paths que pertencem ao mesmo grupo @ApiGroup
     * @return padr√£o agregado que engloba todos os paths
     */
    private String determineAggregatedPattern(Set<String> paths) {
        if (paths.isEmpty()) {
            return "/";
        }
        
        if (paths.size() == 1) {
            // Se s√≥ h√° um path, usa ele mesmo
            return paths.iterator().next();
        }
        
        // üîç Encontrar o prefixo comum mais longo
        String[] pathArray = paths.toArray(new String[0]);
        String commonPrefix = pathArray[0];
        
        for (int i = 1; i < pathArray.length; i++) {
            commonPrefix = findCommonPrefix(commonPrefix, pathArray[i]);
        }
        
        // üßπ Limpar o prefixo comum para remover segmentos incompletos
        // Ex: "/api/human-reso" ‚Üí "/api" (remove segmento incompleto)
        if (commonPrefix.length() > 1 && commonPrefix.endsWith("/")) {
            commonPrefix = commonPrefix.substring(0, commonPrefix.length() - 1);
        } else if (commonPrefix.length() > 1) {
            // Remove √∫ltimo segmento se incompleto
            int lastSlash = commonPrefix.lastIndexOf('/');
            if (lastSlash > 0) {
                final String prefixToCheck = commonPrefix;
                if (!paths.stream().allMatch(p -> p.startsWith(prefixToCheck + "/"))) {
                    commonPrefix = commonPrefix.substring(0, lastSlash);
                }
            }
        }
        
        return commonPrefix.isEmpty() ? "/" : commonPrefix;
    }
    
    /**
     * Encontra o prefixo comum entre duas strings.
     */
    private String findCommonPrefix(String str1, String str2) {
        int minLength = Math.min(str1.length(), str2.length());
        int i = 0;
        
        while (i < minLength && str1.charAt(i) == str2.charAt(i)) {
            i++;
        }
        
        return str1.substring(0, i);
    }

    /**
     * Extrai o basePath de uma anota√ß√£o @ApiResource, priorizando value[] sobre path[].
     * 
     * @param apiResource a anota√ß√£o @ApiResource do controller
     * @return o basePath extra√≠do ou null se n√£o encontrado
     */
    private String extractBasePath(ApiResource apiResource) {
        // Tenta obter o path de value[] primeiro
        if (apiResource.value().length > 0) {
            return apiResource.value()[0];
        }
        // Se n√£o encontrar, tenta path[]
        else if (apiResource.path().length > 0) {
            return apiResource.path()[0];
        }
        return null;
    }
    
    /**
     * Extrai o basePath de uma anota√ß√£o @RequestMapping, priorizando value[] sobre path[].
     * 
     * @param requestMapping a anota√ß√£o @RequestMapping do controller
     * @return o basePath extra√≠do ou null se n√£o encontrado
     */
    private String extractBasePath(RequestMapping requestMapping) {
        // Tenta obter o path de value[] primeiro
        if (requestMapping.value().length > 0) {
            return requestMapping.value()[0];
        }
        // Se n√£o encontrar, tenta path[]
        else if (requestMapping.path().length > 0) {
            return requestMapping.path()[0];
        }
        return null;
    }

    /**
     * <h3>üèóÔ∏è Registra Grupo com Nome Auto-Gerado</h3>
     * <p>Cria um bean GroupedOpenApi com nome gerado automaticamente baseado no path.</p>
     * 
     * <h4>üìù Exemplo de Transforma√ß√£o:</h4>
     * <pre>
     * Input:  "/api/human-resources/funcionarios"
     * Output: "api-human-resources-funcionarios"
     * </pre>
     *
     * @param basePath o path base do controller (ex: "/api/human-resources/funcionarios")
     */
    private void registerGroupBean(String basePath) {
        // üßπ Gera um nome limpo para o grupo removendo barras iniciais/finais e substituindo "/" por "-"
        String groupName = basePath.replaceAll("^/|/$", "").replace("/", "-");
        registerGroupBeanWithCustomName(basePath, groupName);
    }

    /**
     * <h3>üé® Registra Grupo com Nome Personalizado</h3>
     * <p>Cria um bean GroupedOpenApi no Spring Bean Factory com nome definido via @ApiGroup.</p>
     * 
     * <h4>üîß Processo Interno:</h4>
     * <ol>
     *   <li>Cria padr√£o de path com wildcard: basePath + "/**"</li>
     *   <li>Constr√≥i GroupedOpenApi com nome e padr√µes</li>
     *   <li>Registra como singleton no ConfigurableListableBeanFactory</li>
     *   <li>Nome do bean √∫nico para evitar conflitos: groupName + "_ApiGroup"</li>
     * </ol>
     * 
     * <h4>üåê Impacto na Resolu√ß√£o de Grupos:</h4>
     * <p>Os beans registrados aqui s√£o posteriormente utilizados pelo OpenApiGroupResolver
     * para detectar qual grupo corresponde a uma requisi√ß√£o espec√≠fica.</p>
     *
     * @param basePath o path base do controller (ex: "/api/human-resources/funcionarios")
     * @param groupName o nome personalizado do grupo (ex: "human-resources")
     */
    private void registerGroupBeanWithCustomName(String basePath, String groupName) {
        // üéØ Cria padr√£o de matching: "/api/human-resources/funcionarios" ‚Üí "/api/human-resources/funcionarios/**"
        String pathsToMatch = basePath + "/**";

        // üèóÔ∏è Constr√≥i o bean GroupedOpenApi
        GroupedOpenApi groupedOpenApi = GroupedOpenApi.builder()
                .group(groupName)
                .pathsToMatch(pathsToMatch)
                .build();

        // üìù Registra o bean no factory com nome √∫nico para evitar conflitos
        String beanName = groupName.replace("-", "_") + "_ApiGroup";
        beanFactory.registerSingleton(beanName, groupedOpenApi);
        
        logger.info("Bean GroupedOpenApi registrado: bean={}, group={}, paths={}",
            beanName, groupName, pathsToMatch);
    }
}
